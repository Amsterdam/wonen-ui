{"version":3,"file":"694.d3b4fd65.iframe.bundle.js","mappings":";;AAIA;AACA;;;AAGA;;;;;;;;;;;;;AC4CA;AACA;AACA;AACA;AACA;AACA;AAIA;AAUA;AACA;AAEA;AACA;;AAGA;AACA;;;;;;;;;AAgDA;;;;;;AAQA;;;AAGA;;AASA;;;;AAIA;;;;AAIA;;AAGA;AAEA;AAEA;AACA;AACA;AChJA;;AAEA;AACA;AClBA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;AAEA","sources":["webpack://@amsterdam/wonen-ui/./node_modules/@amsterdam/asc-ui/es/components/GlobalStyle/GlobalStyle.js","webpack://@amsterdam/wonen-ui/./node_modules/@amsterdam/asc-ui/es/utils/themeUtils.js","webpack://@amsterdam/wonen-ui/./node_modules/@storybook/addon-backgrounds/dist/preview.mjs","webpack://@amsterdam/wonen-ui/./node_modules/@storybook/addon-outline/dist/preview.mjs"],"sourcesContent":["import { normalize } from 'polished';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { getValueFromTheme } from '../../utils';\r\nconst GlobalStyle = createGlobalStyle `\n  ${normalize()}\n  ${({ theme }) => getValueFromTheme('globalStyle')({ theme })}\n\n  body {\n    font-family: ${getValueFromTheme('typography.fontFamily')};\n  }\n\n  /* Display reset for older browsers that don't support certain HTML5 elements */\n  article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {\n      display: block;\n  }\n  \n  /* Use border-box sizing by default for all elements */\n  *, *::before, *::after {\n    box-sizing: border-box;\n  } \n`;\r\nexport default GlobalStyle;\r\n//# sourceMappingURL=GlobalStyle.js.map","var __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nimport { css, keyframes } from 'styled-components';\r\nimport { BACKDROP_Z_INDEX } from '../components/shared/constants';\r\nimport { fromProps } from './fromProps';\r\n/**\r\n * Curry function to provide the theme as first parameter, followed up with other parameters\r\n * @param cb\r\n *\r\n * @example\r\n * const myThemeHelperFunction = withTheme((theme, ...otherParams) => {\r\n *   ...\r\n * })\r\n *\r\n * css`\r\n *  ${myThemeHelperFunction(param1, param2)}\r\n * `\r\n */\r\nexport const withTheme = (cb) => (...params) => ({ theme }) => cb(theme, ...params);\r\n/**\r\n * A shortcut to the `fromProps` that will get a value out of the props.theme object\r\n */\r\nexport const getValueFromTheme = withTheme((theme, identifier, callback) => fromProps(identifier, callback)(theme));\r\nexport const themeColor = withTheme(\r\n// eslint-disable-next-line default-param-last\r\n(theme, colorType, colorSubtype = 'main', override) => {\r\n    if (override) {\r\n        return override;\r\n    }\r\n    if (colorType) {\r\n        return getValueFromTheme(`colors.${[colorType]}.${[colorSubtype]}`)({\r\n            theme,\r\n        });\r\n    }\r\n    return getValueFromTheme('colors.tint.level1')({ theme });\r\n});\r\nexport const breakpoint = withTheme((theme, type, variant) => {\r\n    const breakpointFunc = getValueFromTheme(`breakpoints.${[variant]}`)({\r\n        theme,\r\n    });\r\n    return breakpointFunc && breakpointFunc(type);\r\n});\r\nconst generateCSSFromTypography = ({ color, fontWeight, fontSize, letterSpacing, lineHeight, marginBottom, }, gutterBottom) => css `\n  color: ${color};\n  font-weight: ${fontWeight};\n  font-size: ${fontSize};\n  letter-spacing: ${letterSpacing};\n  line-height: ${lineHeight};\n  margin-bottom: ${typeof gutterBottom === 'number'\r\n    ? `${gutterBottom}px`\r\n    : marginBottom};\n`;\r\nexport const getTypographyFromTheme = () => ({ as: asProp = 'p', gutterBottom, styleAs, theme }) => {\r\n    const as = styleAs || asProp;\r\n    const styles = getValueFromTheme(`typography.${[as]}`)({\r\n        theme,\r\n    });\r\n    if (!styles) {\r\n        return '';\r\n    }\r\n    const { breakpoints } = styles, otherProps = __rest(styles, [\"breakpoints\"]);\r\n    return css `\n      ${generateCSSFromTypography(otherProps, gutterBottom)}\n      ${() => breakpoints\r\n        ? Object.entries(breakpoints).map(([breakpointFromTypography, typoStyles]) => css `\n                @media screen and ${breakpoint('min-width', breakpointFromTypography)} {\n                  ${generateCSSFromTypography(typoStyles || {}, gutterBottom)}\n                }\n              `)\r\n        : ``}\n    `;\r\n};\r\nexport const getTypographyValueFromProperty = withTheme((theme, element, property, breakpointRule) => {\r\n    const rules = getValueFromTheme(`typography.${[element]}`)({ theme });\r\n    if (breakpointRule) {\r\n        if (rules.breakpoints[breakpointRule]) {\r\n            return rules.breakpoints[breakpointRule][property];\r\n        }\r\n        return '';\r\n    }\r\n    return rules[property];\r\n});\r\n/**\r\n * When this style is applied on an element it will be hidden but still readable by screen readers.\r\n *\r\n * For example:\r\n * ```ts\r\n * const OnlyVisibleForScreenReaders = styled.button`${srOnlyStyle}`\r\n * ```\r\n */\r\nexport const srOnlyStyle = css `\n  border-width: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n`;\r\n/**\r\n * Fills the elements in an SVG with a color, useful for styling icons.\r\n *\r\n * For example, using a theme color:\r\n * ```jsx\r\n * const PrimaryCarIcon = styled(CarIcon)`\r\n *   ${svgFill(themeColor('primary'))}\r\n * `\r\n * ```\r\n *\r\n * Or by setting the color directly using any color valid in CSS, such as hexadecimal, rgba() and hsla().\r\n *\r\n * ```jsx\r\n * const RedCarIcon = styled(CarIcon)`\r\n *   ${svgFill('#FF0000')}\r\n * `\r\n * ```\r\n */\r\nexport const svgFill = withTheme((theme, color) => {\r\n    const fill = typeof color === 'function' ? color({ theme }) : color;\r\n    return css `\n    & svg {\n      circle,\n      rect,\n      polygon,\n      path {\n        fill: ${fill};\n      }\n    }\n  `;\r\n});\r\n/**\r\n * Adds an animated background to the element to indicate the content is loading.\r\n * @param animateLoading Allows toggling the animation effect, if false a fixed color will be used instead.\r\n */\r\nexport const perceivedLoading = withTheme((theme, animateLoading = true) => {\r\n    const animation = keyframes `\n      0% {\n        background-color: ${themeColor('tint', 'level3')({ theme })};\n      }\n\n      50% {\n        background-color: ${themeColor('tint', 'level4')({ theme })};\n      }\n\n      100% {\n        background-color: ${themeColor('tint', 'level3')({ theme })};\n      }\n    `;\r\n    return animateLoading\r\n        ? css `\n        animation: ${animation} 2s ease-in-out infinite;\n      `\r\n        : css `\n        background-color: ${themeColor('tint', 'level4')({ theme })};\n      `;\r\n});\r\n/**\r\n * @deprecated Only used in deprecated component GridItem\r\n * @param sizes\r\n * @param propertyName\r\n * @param theme\r\n */\r\nexport const mapToBreakpoints = (sizes, propertyName, theme) => {\r\n    const breakpointVariants = Object.keys(theme.breakpoints);\r\n    return css `\n    ${sizes\r\n        .map((value, index) => index === 0\r\n        ? `${propertyName}: ${value};`\r\n        : breakpointVariants[index] &&\r\n            `\n        @media screen and ${breakpoint('min-width', breakpointVariants[index])({\r\n                theme,\r\n            })} {\n          ${propertyName}: ${value};\n        }\n      `)\r\n        .join('')}\n  `;\r\n};\r\nexport const showHide = () => ({ hideAt, showAt, theme }) => {\r\n    const hideAtCss = hideAt\r\n        ? css `\n          @media screen and ${breakpoint('min-width', hideAt)({ theme })} {\n            display: none;\n          }\n        `\r\n        : '';\r\n    const showAtCss = showAt\r\n        ? css `\n          @media screen and ${breakpoint('max-width', showAt)({ theme })} {\n            display: none;\n          }\n        `\r\n        : '';\r\n    return css `\n      ${showAtCss}\n      ${hideAtCss}\n    `;\r\n};\r\n// Function that uses the BACKDROP_Z_INDEX constant to determine the z-index for components rendered with a backdrop\r\n// The first argument in the curry can be used to raise the z-index for components that need to be displayed above\r\n// the backdrop, but aren't directly related\r\nexport const showAboveBackDrop = (show) => ({ hasBackDrop, zIndexOffset, }) => hasBackDrop || show\r\n    ? css `\n          z-index: ${zIndexOffset\r\n        ? BACKDROP_Z_INDEX + zIndexOffset + 1\r\n        : BACKDROP_Z_INDEX + 1};\n        `\r\n    : '';\r\n/**\r\n * Retrieve an amount of pixels by passing a factor that will multiply it by the theme's spacing unit\r\n *\r\n * @example If the theme's spacing unit is 4px:\r\n * css`\r\n *  padding: ${themeSpacing(1, 2, 1, 4)} // padding: 4px 8px 4px 16px;\r\n *  margin-bottom: ${themeSpacing(3)} // margin-bottom: 12px;\r\n * `\r\n */\r\nexport const themeSpacing = withTheme((theme, ...factors) => {\r\n    const spacing = getValueFromTheme('spacing')({ theme });\r\n    return factors\r\n        .map((factor) => factor && `${factor * spacing}px`)\r\n        .join(' ')\r\n        .trim();\r\n});\r\n/**\r\n * @deprecated Please wrap around the SC styled() method to extend your styles.\r\n */\r\nexport const customCss = (props) => props.css &&\r\n    css `\n    ${props.css}\n  `;\r\n//# sourceMappingURL=themeUtils.js.map","import { useEffect, useMemo } from 'storybook/internal/preview-api';\nimport { global } from '@storybook/global';\nimport { logger } from 'storybook/internal/client-logger';\nimport { dedent } from 'ts-dedent';\n\nvar PARAM_KEY=\"backgrounds\";var DEFAULT_BACKGROUNDS={light:{name:\"light\",value:\"#F8F8F8\"},dark:{name:\"dark\",value:\"#333\"}};var{document,window}=global,isReduceMotionEnabled=()=>!!window?.matchMedia(\"(prefers-reduced-motion: reduce)\")?.matches,clearStyles=selector=>{(Array.isArray(selector)?selector:[selector]).forEach(clearStyle);},clearStyle=selector=>{let element=document.getElementById(selector);element&&element.parentElement?.removeChild(element);},addGridStyle=(selector,css)=>{let existingStyle=document.getElementById(selector);if(existingStyle)existingStyle.innerHTML!==css&&(existingStyle.innerHTML=css);else {let style=document.createElement(\"style\");style.setAttribute(\"id\",selector),style.innerHTML=css,document.head.appendChild(style);}},addBackgroundStyle=(selector,css,storyId)=>{let existingStyle=document.getElementById(selector);if(existingStyle)existingStyle.innerHTML!==css&&(existingStyle.innerHTML=css);else {let style=document.createElement(\"style\");style.setAttribute(\"id\",selector),style.innerHTML=css;let gridStyleSelector=`addon-backgrounds-grid${storyId?`-docs-${storyId}`:\"\"}`,existingGridStyle=document.getElementById(gridStyleSelector);existingGridStyle?existingGridStyle.parentElement?.insertBefore(style,existingGridStyle):document.head.appendChild(style);}};var defaultGrid={cellSize:100,cellAmount:10,opacity:.8},BG_SELECTOR_BASE=\"addon-backgrounds\",GRID_SELECTOR_BASE=\"addon-backgrounds-grid\",transitionStyle=isReduceMotionEnabled()?\"\":\"transition: background-color 0.3s;\",withBackgroundAndGrid=(StoryFn,context)=>{let{globals,parameters:parameters2,viewMode,id}=context,{options=DEFAULT_BACKGROUNDS,disable,grid=defaultGrid}=parameters2[PARAM_KEY]||{},data=globals[PARAM_KEY]||{},backgroundName=data.value,item=backgroundName?options[backgroundName]:void 0,value=item?.value||\"transparent\",showGrid=data.grid||!1,shownBackground=!!item&&!disable,backgroundSelector=viewMode===\"docs\"?`#anchor--${id} .docs-story`:\".sb-show-main\",gridSelector=viewMode===\"docs\"?`#anchor--${id} .docs-story`:\".sb-show-main\",isLayoutPadded=parameters2.layout===void 0||parameters2.layout===\"padded\",defaultOffset=viewMode===\"docs\"?20:isLayoutPadded?16:0,{cellAmount,cellSize,opacity,offsetX=defaultOffset,offsetY=defaultOffset}=grid,backgroundSelectorId=viewMode===\"docs\"?`${BG_SELECTOR_BASE}-docs-${id}`:`${BG_SELECTOR_BASE}-color`,backgroundTarget=viewMode===\"docs\"?id:null;useEffect(()=>{let backgroundStyles=`\n    ${backgroundSelector} {\n      background: ${value} !important;\n      ${transitionStyle}\n      }`;if(!shownBackground){clearStyles(backgroundSelectorId);return}addBackgroundStyle(backgroundSelectorId,backgroundStyles,backgroundTarget);},[backgroundSelector,backgroundSelectorId,backgroundTarget,shownBackground,value]);let gridSelectorId=viewMode===\"docs\"?`${GRID_SELECTOR_BASE}-docs-${id}`:`${GRID_SELECTOR_BASE}`;return useEffect(()=>{if(!showGrid){clearStyles(gridSelectorId);return}let gridSize=[`${cellSize*cellAmount}px ${cellSize*cellAmount}px`,`${cellSize*cellAmount}px ${cellSize*cellAmount}px`,`${cellSize}px ${cellSize}px`,`${cellSize}px ${cellSize}px`].join(\", \"),gridStyles=`\n        ${gridSelector} {\n          background-size: ${gridSize} !important;\n          background-position: ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px !important;\n          background-blend-mode: difference !important;\n          background-image: linear-gradient(rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),\n           linear-gradient(90deg, rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),\n           linear-gradient(rgba(130, 130, 130, ${opacity/2}) 1px, transparent 1px),\n           linear-gradient(90deg, rgba(130, 130, 130, ${opacity/2}) 1px, transparent 1px) !important;\n        }\n      `;addGridStyle(gridSelectorId,gridStyles);},[cellAmount,cellSize,gridSelector,gridSelectorId,showGrid,offsetX,offsetY,opacity]),StoryFn()};var getBackgroundColorByName=(currentSelectedValue,backgrounds=[],defaultName)=>{if(currentSelectedValue===\"transparent\")return \"transparent\";if(backgrounds.find(background=>background.value===currentSelectedValue)||currentSelectedValue)return currentSelectedValue;let defaultBackground=backgrounds.find(background=>background.name===defaultName);if(defaultBackground)return defaultBackground.value;if(defaultName){let availableColors=backgrounds.map(background=>background.name).join(\", \");logger.warn(dedent`\n        Backgrounds Addon: could not find the default color \"${defaultName}\".\n        These are the available colors for your story based on your configuration:\n        ${availableColors}.\n      `);}return \"transparent\"};var withBackground=(StoryFn,context)=>{let{globals,parameters:parameters2}=context,globalsBackgroundColor=globals[PARAM_KEY]?.value,backgroundsConfig=parameters2[PARAM_KEY],selectedBackgroundColor=useMemo(()=>backgroundsConfig.disable?\"transparent\":getBackgroundColorByName(globalsBackgroundColor,backgroundsConfig.values,backgroundsConfig.default),[backgroundsConfig,globalsBackgroundColor]),isActive=useMemo(()=>selectedBackgroundColor&&selectedBackgroundColor!==\"transparent\",[selectedBackgroundColor]),selector=context.viewMode===\"docs\"?`#anchor--${context.id} .docs-story`:\".sb-show-main\",backgroundStyles=useMemo(()=>`\n      ${selector} {\n        background: ${selectedBackgroundColor} !important;\n        ${isReduceMotionEnabled()?\"\":\"transition: background-color 0.3s;\"}\n      }\n    `,[selectedBackgroundColor,selector]);return useEffect(()=>{let selectorId=context.viewMode===\"docs\"?`addon-backgrounds-docs-${context.id}`:\"addon-backgrounds-color\";if(!isActive){clearStyles(selectorId);return}addBackgroundStyle(selectorId,backgroundStyles,context.viewMode===\"docs\"?context.id:null);},[isActive,backgroundStyles,context]),StoryFn()};var withGrid=(StoryFn,context)=>{let{globals,parameters:parameters2}=context,gridParameters=parameters2[PARAM_KEY].grid,isActive=globals[PARAM_KEY]?.grid===!0&&gridParameters.disable!==!0,{cellAmount,cellSize,opacity}=gridParameters,isInDocs=context.viewMode===\"docs\",defaultOffset=parameters2.layout===void 0||parameters2.layout===\"padded\"?16:0,offsetX=gridParameters.offsetX??(isInDocs?20:defaultOffset),offsetY=gridParameters.offsetY??(isInDocs?20:defaultOffset),gridStyles=useMemo(()=>{let selector=context.viewMode===\"docs\"?`#anchor--${context.id} .docs-story`:\".sb-show-main\",backgroundSize=[`${cellSize*cellAmount}px ${cellSize*cellAmount}px`,`${cellSize*cellAmount}px ${cellSize*cellAmount}px`,`${cellSize}px ${cellSize}px`,`${cellSize}px ${cellSize}px`].join(\", \");return `\n      ${selector} {\n        background-size: ${backgroundSize} !important;\n        background-position: ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px !important;\n        background-blend-mode: difference !important;\n        background-image: linear-gradient(rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),\n         linear-gradient(90deg, rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),\n         linear-gradient(rgba(130, 130, 130, ${opacity/2}) 1px, transparent 1px),\n         linear-gradient(90deg, rgba(130, 130, 130, ${opacity/2}) 1px, transparent 1px) !important;\n      }\n    `},[cellSize]);return useEffect(()=>{let selectorId=context.viewMode===\"docs\"?`addon-backgrounds-grid-docs-${context.id}`:\"addon-backgrounds-grid\";if(!isActive){clearStyles(selectorId);return}addGridStyle(selectorId,gridStyles);},[isActive,gridStyles,context]),StoryFn()};var decorators=FEATURES?.backgroundsStoryGlobals?[withBackgroundAndGrid]:[withGrid,withBackground],parameters={[PARAM_KEY]:{grid:{cellSize:20,opacity:.5,cellAmount:5},disable:!1,...!FEATURES?.backgroundsStoryGlobals&&{values:Object.values(DEFAULT_BACKGROUNDS)}}},modern={[PARAM_KEY]:{value:void 0,grid:!1}},initialGlobals=FEATURES?.backgroundsStoryGlobals?modern:{[PARAM_KEY]:null};\n\nexport { decorators, initialGlobals, parameters };\n","import { useMemo, useEffect } from 'storybook/internal/preview-api';\nimport { global } from '@storybook/global';\nimport { dedent } from 'ts-dedent';\n\nvar PARAM_KEY=\"outline\";var clearStyles=selector=>{(Array.isArray(selector)?selector:[selector]).forEach(clearStyle);},clearStyle=input=>{let selector=typeof input==\"string\"?input:input.join(\"\"),element=global.document.getElementById(selector);element&&element.parentElement&&element.parentElement.removeChild(element);},addOutlineStyles=(selector,css)=>{let existingStyle=global.document.getElementById(selector);if(existingStyle)existingStyle.innerHTML!==css&&(existingStyle.innerHTML=css);else {let style=global.document.createElement(\"style\");style.setAttribute(\"id\",selector),style.innerHTML=css,global.document.head.appendChild(style);}};function outlineCSS(selector){return dedent`\n    ${selector} body {\n      outline: 1px solid #2980b9 !important;\n    }\n\n    ${selector} article {\n      outline: 1px solid #3498db !important;\n    }\n\n    ${selector} nav {\n      outline: 1px solid #0088c3 !important;\n    }\n\n    ${selector} aside {\n      outline: 1px solid #33a0ce !important;\n    }\n\n    ${selector} section {\n      outline: 1px solid #66b8da !important;\n    }\n\n    ${selector} header {\n      outline: 1px solid #99cfe7 !important;\n    }\n\n    ${selector} footer {\n      outline: 1px solid #cce7f3 !important;\n    }\n\n    ${selector} h1 {\n      outline: 1px solid #162544 !important;\n    }\n\n    ${selector} h2 {\n      outline: 1px solid #314e6e !important;\n    }\n\n    ${selector} h3 {\n      outline: 1px solid #3e5e85 !important;\n    }\n\n    ${selector} h4 {\n      outline: 1px solid #449baf !important;\n    }\n\n    ${selector} h5 {\n      outline: 1px solid #c7d1cb !important;\n    }\n\n    ${selector} h6 {\n      outline: 1px solid #4371d0 !important;\n    }\n\n    ${selector} main {\n      outline: 1px solid #2f4f90 !important;\n    }\n\n    ${selector} address {\n      outline: 1px solid #1a2c51 !important;\n    }\n\n    ${selector} div {\n      outline: 1px solid #036cdb !important;\n    }\n\n    ${selector} p {\n      outline: 1px solid #ac050b !important;\n    }\n\n    ${selector} hr {\n      outline: 1px solid #ff063f !important;\n    }\n\n    ${selector} pre {\n      outline: 1px solid #850440 !important;\n    }\n\n    ${selector} blockquote {\n      outline: 1px solid #f1b8e7 !important;\n    }\n\n    ${selector} ol {\n      outline: 1px solid #ff050c !important;\n    }\n\n    ${selector} ul {\n      outline: 1px solid #d90416 !important;\n    }\n\n    ${selector} li {\n      outline: 1px solid #d90416 !important;\n    }\n\n    ${selector} dl {\n      outline: 1px solid #fd3427 !important;\n    }\n\n    ${selector} dt {\n      outline: 1px solid #ff0043 !important;\n    }\n\n    ${selector} dd {\n      outline: 1px solid #e80174 !important;\n    }\n\n    ${selector} figure {\n      outline: 1px solid #ff00bb !important;\n    }\n\n    ${selector} figcaption {\n      outline: 1px solid #bf0032 !important;\n    }\n\n    ${selector} table {\n      outline: 1px solid #00cc99 !important;\n    }\n\n    ${selector} caption {\n      outline: 1px solid #37ffc4 !important;\n    }\n\n    ${selector} thead {\n      outline: 1px solid #98daca !important;\n    }\n\n    ${selector} tbody {\n      outline: 1px solid #64a7a0 !important;\n    }\n\n    ${selector} tfoot {\n      outline: 1px solid #22746b !important;\n    }\n\n    ${selector} tr {\n      outline: 1px solid #86c0b2 !important;\n    }\n\n    ${selector} th {\n      outline: 1px solid #a1e7d6 !important;\n    }\n\n    ${selector} td {\n      outline: 1px solid #3f5a54 !important;\n    }\n\n    ${selector} col {\n      outline: 1px solid #6c9a8f !important;\n    }\n\n    ${selector} colgroup {\n      outline: 1px solid #6c9a9d !important;\n    }\n\n    ${selector} button {\n      outline: 1px solid #da8301 !important;\n    }\n\n    ${selector} datalist {\n      outline: 1px solid #c06000 !important;\n    }\n\n    ${selector} fieldset {\n      outline: 1px solid #d95100 !important;\n    }\n\n    ${selector} form {\n      outline: 1px solid #d23600 !important;\n    }\n\n    ${selector} input {\n      outline: 1px solid #fca600 !important;\n    }\n\n    ${selector} keygen {\n      outline: 1px solid #b31e00 !important;\n    }\n\n    ${selector} label {\n      outline: 1px solid #ee8900 !important;\n    }\n\n    ${selector} legend {\n      outline: 1px solid #de6d00 !important;\n    }\n\n    ${selector} meter {\n      outline: 1px solid #e8630c !important;\n    }\n\n    ${selector} optgroup {\n      outline: 1px solid #b33600 !important;\n    }\n\n    ${selector} option {\n      outline: 1px solid #ff8a00 !important;\n    }\n\n    ${selector} output {\n      outline: 1px solid #ff9619 !important;\n    }\n\n    ${selector} progress {\n      outline: 1px solid #e57c00 !important;\n    }\n\n    ${selector} select {\n      outline: 1px solid #e26e0f !important;\n    }\n\n    ${selector} textarea {\n      outline: 1px solid #cc5400 !important;\n    }\n\n    ${selector} details {\n      outline: 1px solid #33848f !important;\n    }\n\n    ${selector} summary {\n      outline: 1px solid #60a1a6 !important;\n    }\n\n    ${selector} command {\n      outline: 1px solid #438da1 !important;\n    }\n\n    ${selector} menu {\n      outline: 1px solid #449da6 !important;\n    }\n\n    ${selector} del {\n      outline: 1px solid #bf0000 !important;\n    }\n\n    ${selector} ins {\n      outline: 1px solid #400000 !important;\n    }\n\n    ${selector} img {\n      outline: 1px solid #22746b !important;\n    }\n\n    ${selector} iframe {\n      outline: 1px solid #64a7a0 !important;\n    }\n\n    ${selector} embed {\n      outline: 1px solid #98daca !important;\n    }\n\n    ${selector} object {\n      outline: 1px solid #00cc99 !important;\n    }\n\n    ${selector} param {\n      outline: 1px solid #37ffc4 !important;\n    }\n\n    ${selector} video {\n      outline: 1px solid #6ee866 !important;\n    }\n\n    ${selector} audio {\n      outline: 1px solid #027353 !important;\n    }\n\n    ${selector} source {\n      outline: 1px solid #012426 !important;\n    }\n\n    ${selector} canvas {\n      outline: 1px solid #a2f570 !important;\n    }\n\n    ${selector} track {\n      outline: 1px solid #59a600 !important;\n    }\n\n    ${selector} map {\n      outline: 1px solid #7be500 !important;\n    }\n\n    ${selector} area {\n      outline: 1px solid #305900 !important;\n    }\n\n    ${selector} a {\n      outline: 1px solid #ff62ab !important;\n    }\n\n    ${selector} em {\n      outline: 1px solid #800b41 !important;\n    }\n\n    ${selector} strong {\n      outline: 1px solid #ff1583 !important;\n    }\n\n    ${selector} i {\n      outline: 1px solid #803156 !important;\n    }\n\n    ${selector} b {\n      outline: 1px solid #cc1169 !important;\n    }\n\n    ${selector} u {\n      outline: 1px solid #ff0430 !important;\n    }\n\n    ${selector} s {\n      outline: 1px solid #f805e3 !important;\n    }\n\n    ${selector} small {\n      outline: 1px solid #d107b2 !important;\n    }\n\n    ${selector} abbr {\n      outline: 1px solid #4a0263 !important;\n    }\n\n    ${selector} q {\n      outline: 1px solid #240018 !important;\n    }\n\n    ${selector} cite {\n      outline: 1px solid #64003c !important;\n    }\n\n    ${selector} dfn {\n      outline: 1px solid #b4005a !important;\n    }\n\n    ${selector} sub {\n      outline: 1px solid #dba0c8 !important;\n    }\n\n    ${selector} sup {\n      outline: 1px solid #cc0256 !important;\n    }\n\n    ${selector} time {\n      outline: 1px solid #d6606d !important;\n    }\n\n    ${selector} code {\n      outline: 1px solid #e04251 !important;\n    }\n\n    ${selector} kbd {\n      outline: 1px solid #5e001f !important;\n    }\n\n    ${selector} samp {\n      outline: 1px solid #9c0033 !important;\n    }\n\n    ${selector} var {\n      outline: 1px solid #d90047 !important;\n    }\n\n    ${selector} mark {\n      outline: 1px solid #ff0053 !important;\n    }\n\n    ${selector} bdi {\n      outline: 1px solid #bf3668 !important;\n    }\n\n    ${selector} bdo {\n      outline: 1px solid #6f1400 !important;\n    }\n\n    ${selector} ruby {\n      outline: 1px solid #ff7b93 !important;\n    }\n\n    ${selector} rt {\n      outline: 1px solid #ff2f54 !important;\n    }\n\n    ${selector} rp {\n      outline: 1px solid #803e49 !important;\n    }\n\n    ${selector} span {\n      outline: 1px solid #cc2643 !important;\n    }\n\n    ${selector} br {\n      outline: 1px solid #db687d !important;\n    }\n\n    ${selector} wbr {\n      outline: 1px solid #db175b !important;\n    }`}var withOutline=(StoryFn,context)=>{let{globals}=context,isActive=[!0,\"true\"].includes(globals[PARAM_KEY]),isInDocs=context.viewMode===\"docs\",outlineStyles=useMemo(()=>outlineCSS(isInDocs?'[data-story-block=\"true\"]':\".sb-show-main\"),[context]);return useEffect(()=>{let selectorId=isInDocs?`addon-outline-docs-${context.id}`:\"addon-outline\";return isActive?addOutlineStyles(selectorId,outlineStyles):clearStyles(selectorId),()=>{clearStyles(selectorId);}},[isActive,outlineStyles,context]),StoryFn()};var decorators=[withOutline],initialGlobals={[PARAM_KEY]:!1};\n\nexport { decorators, initialGlobals };\n"],"names":[],"sourceRoot":""}