{"version":3,"file":"964.dd422ed5.iframe.bundle.js","mappings":";;;;AAeA;AACA;AACA;;AAEA;;AAEA;AASA;;ACvBA;ACSA;;AAEA;AAGA;;AAEA;;;;;;AAMA;;AAKA;AAGA;AACA;;AAGA;;;;;;;;AAUA;AACA;AACA;AACA;;;;;AAKA;;AAIA;;AAEA;AACA;;;;;;AAcA;;ACxDA;;;ACdA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;ACLA;;ACaA;AACA;;;AAGA;;AAEA;;;;;;;;;;;;;;AAcA;AACA;;AAEA;AACA;AACA;;;AAIA;;AAEA;AACA;;;AAGA;;;;;AAKA;;AAEA;AACA;AACA;;AAEA;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;;AAIA;;;AAKA;;;AAGA;AACA;AACA;;;;;;AAMA;;;;;AAOA;;AAEA;AACA;;AAEA;;AAIA;;;;;;AAQA;;;;;AAKA;;;;;AAKA;;AAEA;;;;;;AAMA;;;;AAMA;;;;;;;AAOA;;;;;;;;AClJA;;ACHA;ACQA;AAGA;;ACTA;;;;;ACaA;;;AAKA;ACVA;;AAEA;;AAIA;;;;AAMA;AACA;AAmBA;AChCA;;AAEA;;AAIA;;;;AAMA;AACA;AAGA;;ACjBA;;AAIA;ACLA;;;;AAIA;;AAIA;ACjBA;;;;ACYA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;;;;AAIA;;;AAGA;;AAmBA;;;AC3BA;;AASA;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AAGA;AChDA;;;;;;AAMA;;AATA;AAYA;AACA;;;AAGA;AAeA;ACtCA;;;AAKA;;ACYA;;AFVA;AEaA;AACA;;AAIA;;;AASA;AACA;;;AAGA;;AAEA;;AAEA;;AAKA;;AAOA;;;;;;;;;;;;;ACrCA;;;;AAMA;;AAEA;AACA;;;AAKA;;AAUA","sources":["webpack://@amsterdam/wonen-ui/./src/components/Data/components/SmallSkeleton.tsx","webpack://@amsterdam/wonen-ui/./src/components/TextWithLinebreaks/TextWithLinebreaks.tsx","webpack://@amsterdam/wonen-ui/./src/components/Data/DefinitionList/components/Definition.tsx","webpack://@amsterdam/wonen-ui/./src/components/Data/DefinitionList/DefinitionList.tsx","webpack://@amsterdam/wonen-ui/./src/components/EventsTimeline/components/Timeline/EventsTimeline.tsx","webpack://@amsterdam/wonen-ui/./src/components/EventsTimeline/helpers/fields.ts","webpack://@amsterdam/wonen-ui/./src/components/EventsTimeline/components/Timeline/TimelineStyle.tsx","webpack://@amsterdam/wonen-ui/./src/components/EventsTimeline/components/UnstyledList.tsx","webpack://@amsterdam/wonen-ui/./src/components/FinancialDisplay/FinancialDisplay.tsx","webpack://@amsterdam/wonen-ui/./src/components/HolidayRentalReports/components/Report.tsx","webpack://@amsterdam/wonen-ui/./src/components/Data/components/Placeholder.tsx","webpack://@amsterdam/wonen-ui/./src/components/Data/List/List.tsx","webpack://@amsterdam/wonen-ui/./src/components/PermitsOverview/components/PermitDetails.tsx","webpack://@amsterdam/wonen-ui/./src/components/PermitsSynopsis/components/PermitDetails.tsx","webpack://@amsterdam/wonen-ui/./src/components/Residents/hooks/useValues.tsx","webpack://@amsterdam/wonen-ui/./src/components/Residents/ResidentsView.tsx","webpack://@amsterdam/wonen-ui/./src/components/Data/Table/components/TableCell/TableCell.tsx","webpack://@amsterdam/wonen-ui/./src/components/Data/Table/components/TableHeader/StyledHeader.tsx","webpack://@amsterdam/wonen-ui/./src/components/Data/Table/components/TableHeader/Sorter.tsx","webpack://@amsterdam/wonen-ui/./src/components/Data/Table/components/TableCell/FixedTableCell.tsx","webpack://@amsterdam/wonen-ui/./src/components/Data/Table/components/TablePagination/TablePagination.tsx","webpack://@amsterdam/wonen-ui/./src/components/Data/Table/Table.tsx","webpack://@amsterdam/wonen-ui/./src/components/Data/ExpandableContainer/ExpandableContainer.tsx"],"sourcesContent":["import React, { useMemo } from \"react\"\nimport styled, { keyframes } from \"styled-components\"\nimport { themeColor, themeSpacing } from \"@amsterdam/asc-ui\"\n\ntype StyledDivProps = {\n  height: number\n  width: number\n}\n\nconst backgroundAnimation = keyframes`\n    0% { background-position:40%; }\n    50% { background-position:100%; }\n    100% { background-position:40%; }\n`\n\nconst StyledDiv = styled.div<StyledDivProps>`\n  height: ${ props => themeSpacing(props.height) };\n  width: ${ props => props.width }px;\n  max-width: 100%;\n  background: linear-gradient(270deg, ${ themeColor(\"tint\", \"level3\") }, ${ themeColor(\"tint\", \"level4\") });\n  background-size: 400% 400%;\n  animation: ${ backgroundAnimation } 4s linear infinite;\n`\n\ntype Props = {\n  loading?: boolean\n  height?: number\n  maxRandomWidth?: number\n}\n\nconst SmallSkeleton: React.FC<Props> = ({ loading = true, maxRandomWidth = 100, height = 5 }) => {\n  const width = useMemo(() => Math.round(Math.random() * (maxRandomWidth - 50) ) + 50, [maxRandomWidth])\n  return loading ? (\n    <StyledDiv \n      width={ width } \n      height={ height } \n      data-testid=\"small-skeleton\"\n    />\n  ) : <></>\n}\n\nexport default SmallSkeleton\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Span = styled.span`\n  white-space: pre-line;\n`\n\nconst TextWithLinebreaks: React.FC = ({ children }) => <Span>{ children }</Span>\n\nexport default TextWithLinebreaks\n","import React from \"react\"\nimport { breakpoint, themeColor, themeSpacing } from \"@amsterdam/asc-ui\"\nimport styled, { css } from \"styled-components\"\nimport TextWithLinebreaks from \"../../../TextWithLinebreaks/TextWithLinebreaks\"\n\ntype Props = {\n  term: React.ReactNode\n  value: React.ReactNode\n  horizontalBordered?: boolean\n}\n\ntype StyleProps = {\n  horizontalBordered?: boolean\n}\n\nconst Div = styled.div<StyleProps>`\n  border-bottom: 0 solid ${ themeColor(\"tint\",\"level3\") };\n\n  ${ ({ horizontalBordered }) =>\n    horizontalBordered &&\n    css`\n      padding: ${ themeSpacing(2) };\n      border-width: 1px;\n    `\n  }\n  &:last-child {\n    border-bottom: none;\n  }\n\n  max-width: 800px;\n  ${ ({ horizontalBordered }) =>\n    horizontalBordered ?\n    css`\n      margin-bottom: 0;\n    `\n    :\n    css`\n      margin-bottom: ${ themeSpacing(2) };\n    `\n  }\n\n  @media ${ breakpoint(\"min-width\", \"tabletM\") } {\n    margin-bottom: 0;\n    &:after {\n      clear: both;\n      content: \"\";\n      display: table;\n    }\n  }\n`\n\nconst Dt = styled.dt<StyleProps>`\n  color: ${ themeColor(\"tint\",\"level5\") };\n  padding: ${ themeSpacing(1) } 0 ;\n  @media ${ breakpoint(\"min-width\", \"tabletM\") } {\n    float: left;\n    clear: both;\n    word-wrap: break-word;\n    width: 30%;\n    padding-right: ${ themeSpacing(3) };\n  }\n`\n\nconst Dd = styled.dd<StyleProps>`\n  margin: 0;\n  padding: ${ themeSpacing(1) } 0;\n  @media ${ breakpoint(\"min-width\", \"tabletM\") } {\n    float: right;\n    clear: right;\n    width: 70%;\n\n  }\n`\n\nconst castValue = (value: React.ReactNode) => {\n  if (value == null) return \"-\"\n  if (typeof value === \"number\") return `${ value }`\n  return value\n}\n\nconst Definition: React.FC<Props> = ({ term, value, horizontalBordered }) => (\n  <Div horizontalBordered={ horizontalBordered } data-testid=\"definition\">\n    <Dt horizontalBordered={ horizontalBordered }>{ term }</Dt>\n    <Dd horizontalBordered={ horizontalBordered }><TextWithLinebreaks>{ castValue(value) }</TextWithLinebreaks></Dd>\n  </Div>\n)\nexport default Definition\n","import React from \"react\"\nimport { Heading } from \"@amsterdam/asc-ui\"\nimport styled from \"styled-components\"\n\nimport SmallSkeleton from \"../components/SmallSkeleton\"\nimport LoadingRows from \"../components/LoadingRows\"\nimport Definition from \"./components/Definition\"\n\nexport type DefinitionListData = Record<string, React.ReactNode> | undefined\n\ntype Props = {\n  numLoadingRows?: number\n  loading?: boolean\n  title?: React.ReactNode\n  headingSize?: React.ComponentProps<typeof Heading>[\"forwardedAs\"]\n  data: DefinitionListData\n  emptyPlaceholder?: React.ReactNode\n  horizontalBordered?: boolean\n}\n\nconst Dl = styled.dl`\n  margin: 0;\n`\n\nconst DefinitionList: React.FC<Props> = ({\n  loading = false,\n  numLoadingRows = 5,\n  title,\n  headingSize = \"h2\",\n  data,\n  emptyPlaceholder,\n  horizontalBordered = true\n}) => {\n\n  const rows = Object.entries(data ?? {})\n\n  return (\n    <div>\n      { title && (\n        <Heading forwardedAs={ headingSize }>\n          { loading ? <SmallSkeleton height={10} /> : title }\n        </Heading>\n      )}\n      <Dl>\n        { loading ? (\n          <LoadingRows numRows={ numLoadingRows } />\n        ) : (\n          data === undefined && emptyPlaceholder !== undefined) ? (\n            <>{ emptyPlaceholder }</>\n          ) : (\n            <>{ rows.map(([term, value]) => (\n              <Definition\n                key={ term }\n                term={ term }\n                value={ value }\n                horizontalBordered={ horizontalBordered }\n              />\n              ))}\n            </>\n          )\n        }\n      </Dl>\n    </div>\n  )\n}\n\nexport default DefinitionList\n","import styled from \"styled-components\"\nimport { themeSpacing, breakpoint } from \"@amsterdam/asc-ui\"\n\ntype Props = {\n  spacingHorizontal: number\n}\n\nexport default styled.div<Props>`\n  > div {\n    position: relative;\n    margin: 0 ${ ( { spacingHorizontal } ) => themeSpacing( -spacingHorizontal ) } ${ themeSpacing(5) };\n    padding: 0 ${ ( { spacingHorizontal } ) => themeSpacing( spacingHorizontal ) };\n\n    @media screen and ${ breakpoint(\"min-width\", \"tabletS\") } {\n      margin: 0 ${ ( { spacingHorizontal } ) => themeSpacing( -(3 - spacingHorizontal) ) } ${ themeSpacing(5) };\n      padding: 0 ${ ( { spacingHorizontal } ) => themeSpacing( 3 - spacingHorizontal ) };\n    }\n\n    // hide the vertical line in the last item\n    &:last-child {\n      > div:last-child {\n        > div:first-child {\n          &:after {\n            display: none;\n          }\n        }\n      }\n    }\n  }\n\n  button {\n    outline: none;\n  }\n`","export type Field = {\n  key: string\n  label: string\n  italic: boolean\n  isCurrency: boolean\n  mapValue: (v: any) => any\n  shouldShow: (value: any, isNested: boolean) => boolean\n}\ntype FieldConfig = Pick<Field, \"key\"> & Partial<Pick<Field, \"italic\" | \"isCurrency\" | \"mapValue\" | \"shouldShow\">>\n\nconst defaultField = {\n  italic: false,\n  isCurrency: false,\n  mapValue: (v: any) => v,\n  shouldShow: () => true\n}\n\nexport default (fields: Array<FieldConfig | string>, translations: Record<string, string>) =>\n  fields.map(field => {\n    const o = typeof field === \"string\" ? { key: field } : field\n    const label = translations[o.key] ?? \"\"\n    return { ...defaultField, label, ...o }\n  })\n\nexport const variableToField = (key: string, label: string) => ({\n  key,\n  label,\n  ...defaultField\n})","import styled, { css } from \"styled-components\"\nimport { themeColor, themeSpacing, breakpoint, Icon, Button } from \"@amsterdam/asc-ui\"\n\nexport type Props = {\n  isOpen?: boolean\n  largeCircle?: boolean\n  isNested?: boolean\n} & React.AnchorHTMLAttributes<HTMLAnchorElement> &\n  React.HTMLAttributes<HTMLDivElement>;\n\nconst circleSize = {\n  desktop: {\n    large: \"30px\",\n    small: \"20px\"\n  },\n  mobile: {\n    large: \"24px\",\n    small: \"18px\"\n  }\n}\n\nconst CircleWrapperStyle = styled.div<Props>`\n  position: relative;\n  width: ${ circleSize.mobile.large };\n  margin-right: ${ themeSpacing(2) };\n  justify-content: center;\n  z-index: 1;\n  padding: ${ themeSpacing(2) } 0;\n  background-color: transparent;\n  @media ${ breakpoint(\"min-width\", \"laptop\") } {\n    width: 60px;\n    margin-right: 0;\n    flex: 0 0 60px;\n  }\n  /* Force print the background colors on webkit browsers */\n  @media print {\n    -webkit-print-color-adjust: exact;\n  }\n  &:after {\n    content: \"\";\n    position: absolute;\n    display: block;\n    width: 2px;\n    height: calc(100% + ${ themeSpacing(10) });\n    top: ${ ({ isNested }) => isNested ? themeSpacing(-7) : themeSpacing(3) };\n    left: calc(50% - 1px);\n    background-color: ${ themeColor(\"tint\", \"level4\") };\n    @media ${ breakpoint(\"min-width\", \"laptop\") } {\n      top: ${ ({ isNested }) => isNested ? themeSpacing(-5.5) : themeSpacing(3) };\n    }\n  }\n`\nconst CircleStyle = styled(Icon)<Props>`\n  position: relative;\n  width: ${ circleSize.mobile.large };\n  height: ${ circleSize.mobile.large };\n  align-items: center;\n  margin: 0 auto;\n  background-color: ${ themeColor(\"tint\", \"level4\") };\n  border-radius: 50%;\n  justify-content: center;\n  transition: background-color 0.2s ease-in-out;\n  z-index: 1;\n  color: ${ themeColor(\"tint\", \"level1\") };\n\n  @media ${ breakpoint(\"min-width\", \"laptop\") } {\n    width: ${ circleSize.desktop.large };\n    height: ${ circleSize.desktop.large };\n  }\n  ${ ({ largeCircle }) =>\n    !largeCircle &&\n    css`\n      width: ${ circleSize.mobile.small };\n      height: ${ circleSize.mobile.small };\n      margin-top: 4px;\n      @media ${ breakpoint(\"min-width\", \"laptop\") } {\n        width: ${ circleSize.desktop.small };\n        height: ${ circleSize.desktop.small };\n      }\n    ` }\n\n`\n\nconst TimelineItem = styled.div`\n  flex: 1;\n  max-width: calc(100% - 40px);\n`\n\nconst NestedContainer = styled.div<Props>`\n  display: flex;\n  min-width: 100%;\n  margin-left: ${ ({ isNested }) => isNested && \"-32px\" };\n  @media ${ breakpoint(\"min-width\", \"laptop\") } {\n    margin-left: ${ ({ isNested }) => isNested && \"-60px\" };\n  }\n\n  &:last-child{\n    >div:first-child{\n      &:after{\n        display: ${ ({ isNested }) => isNested && \"none\" };\n      }\n    }\n  }\n\n`\n\nconst TimelineContent = styled.div<Props>`\n  transition: opacity 0.3s ease-in-out, max-height 0.5s ease-in-out;\n  opacity: ${ ({ isOpen }) => (isOpen ? 1 : 0) };\n  max-height: ${ ({ isOpen }) => (isOpen ? \"1000px\" : \"0\") }; /* Adjust 500px based on your content */\n  overflow: hidden;\n  padding: ${ ({ isOpen }) => (isOpen ? \"16px 0\" : \"0\") };\n  position: relative;\n`\n\nconst TimelineButtonContent = styled.span`\n  text-align: left;\n  position: relative;\n  font-weight: 500;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`\n\nconst TimelineButton = styled(Button)<Props>`\n  position: relative;\n  width: 100%;\n  height: initial;\n  background-color: transparent;\n  padding: ${ themeSpacing(3) } 0;\n\n  &:hover,\n  &:focus {\n    background-color: transparent;\n    outline-color: ${ themeColor(\"tint\", \"level4\") };\n\n    & + ${ TimelineContent } {\n      border: 0;\n    }\n  }\n  span {\n    span {\n      transform: rotate(${ ({ isOpen }) => (isOpen ? \"180deg\" : \"0deg\") });\n      transition: transform 0.3s ease;\n    }\n  }\n`\n\nconst Background = styled.div<Props>`\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0px;\n  left: 0;\n  // right: 0;\n  background-color: ${ ({ isOpen }) => isOpen ? themeColor(\"tint\",\"level2\") : \"transparent\" };\n  pointer-events: none;\n  z-index: -1;\n`\n\nexport { TimelineItem, TimelineButton, TimelineContent, TimelineButtonContent, CircleWrapperStyle, CircleStyle, Background, NestedContainer }\n","import styled from \"styled-components\"\nimport { themeSpacing } from \"@amsterdam/asc-ui\"\n\nexport default styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  li {\n    padding: 0 0 ${ themeSpacing(1) } 0;\n  }\n`","import React from \"react\"\n\ntype Props = {\n  amount: number\n}\nconst formatter = new Intl.NumberFormat(\"nl-NL\", {\n  style: \"currency\",\n  currency: \"EUR\",\n  maximumFractionDigits: 0,\n  minimumFractionDigits: 0\n})\n\nconst FinancialDisplay: React.FC<Props> = ( { amount } ) => <> { formatter.format( amount ) }</>\n\nexport default FinancialDisplay\n","import React from \"react\"\nimport styled  from \"styled-components\"\nimport { themeSpacing } from \"@amsterdam/asc-ui\"\nimport useReportValues from \"./hooks/useReportValues\"\nimport DefinitionList  from \"../../Data/DefinitionList/DefinitionList\"\nimport type { HolidayRentalReport } from \"../types\"\n\ntype Props = {\n  report: HolidayRentalReport\n  horizontalBordered: boolean\n}\n\nconst StyledDiv = styled.div`\n  margin-top: ${ themeSpacing(3) };\n`\n\nconst Report: React.FC<Props> = ({ report, horizontalBordered }) => {\n  const title = `${ report.isVerwijderd ? \"Afmelding (-\" : \"Melding (+\" }${ report?.nachten } nachten)`\n  const values = useReportValues(report)\n\n  return (\n    <StyledDiv>\n      <DefinitionList\n        title={ title }\n        data={ values }\n        headingSize=\"h4\"\n        horizontalBordered={ horizontalBordered }\n      />\n    </StyledDiv>\n  )\n}\n\nexport default Report","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Wrapper = styled.div`\n  margin-bottom: 1rem;\n`\n\nexport const Placeholder: React.FC = ({ children }) => (\n  <Wrapper>{ children }</Wrapper>\n)\n\nexport default Placeholder\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Heading, themeSpacing } from \"@amsterdam/asc-ui\"\nimport RepeatChildren from \"../components/RepeatChildren\"\nimport SmallSkeleton from \"../components/SmallSkeleton\"\n\ntype Props = {\n  numLoadingRows?: number\n  loading?: boolean\n  title?: React.ReactNode\n  headingSize?: React.ComponentProps<typeof Heading>[\"forwardedAs\"]\n  data?: React.ReactNode[]\n  emptyPlaceholder?: React.ReactNode\n}\n\nconst Ul = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  li {\n    padding: 0 0 ${ themeSpacing(1) } 0;\n    line-height: 1.15;\n  }\n`\n\nconst List: React.FC<Props> = ({ numLoadingRows = 0, loading, title, headingSize = \"h2\", data, emptyPlaceholder }) => (\n  <>\n    { title && (\n        <Heading forwardedAs={ headingSize }>\n          { loading ? <SmallSkeleton height={ 10 } /> : title }\n        </Heading>\n    )}\n    { loading && numLoadingRows > 0 && (\n        <Ul>\n          <RepeatChildren times={ numLoadingRows }>\n            <li><SmallSkeleton /></li>\n          </RepeatChildren>\n        </Ul>\n    )}\n    { data !== undefined && data.length > 0 ? (\n        <Ul data-testid=\"list\">\n          { data.map((item, index) => <li key={ index }>{ item }</li>) }\n        </Ul>\n      ) : emptyPlaceholder\n    }\n  </>\n)\n\nexport default List","import React from \"react\"\nimport styled from \"styled-components\"\nimport { themeSpacing, Icon } from \"@amsterdam/asc-ui\"\nimport dayjs from \"dayjs\"\nimport DefinitionList  from \"../../Data/DefinitionList/DefinitionList\"\nimport { Check, Close } from \"../../Icons/index\"\nimport useValues from \"../hooks/useValues\"\nimport Permit from \"../Permit\"\n\ntype Props = {\n  permit: Permit\n  horizontalBordered: boolean\n}\n\nconst Div = styled.div<{ isOpaque?: boolean }>`\n  margin-bottom: ${ themeSpacing(8) };\n  dl {\n    opacity: ${ ({ isOpaque = true }) => isOpaque ? 1 : 0.3 };\n  }\n`\n\nconst HeadingSpan = styled.span`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n`\n\nconst StyledIcon = styled(Icon)`\n  margin-left: ${ themeSpacing(2) };\n`\n\nconst isDateValid = (permit: Permit) => {\n  const details = permit?.details\n  const endDate = details?.DATE_VALID_TO ?? details?.DATE_VALID_UNTIL\n  const startDate = details?.DATE_VALID_FROM\n  const now = dayjs() // current date and time\n  // If there is a start date and it is in the future, it is not valid.\n  if (startDate && dayjs(startDate).isAfter(now)) {\n    return false\n  }\n  // If there is an end date, it cannot be in the past.\n  if (endDate && dayjs(endDate).isBefore(now)) {\n    return false\n  }\n  return true\n}\n\nconst PermitDetail: React.FC<Props> = ({ permit, horizontalBordered }) => {\n  const values = useValues(permit)\n  const { permit_type, permit_granted } = permit\n  const isGranted = permit_granted === \"GRANTED\"\n  const hasValidDate = isDateValid(permit)\n  const isValid = isGranted && hasValidDate\n\n  return (\n    <Div isOpaque={ isValid }>\n      <DefinitionList\n        title={\n          <HeadingSpan>\n            { permit_type }\n            <StyledIcon color={ isValid ? \"#00a03c\" : \"#ec0000\" } >\n              { isValid ? <Check /> : <Close /> }\n            </StyledIcon>\n          </HeadingSpan>\n        }\n        headingSize=\"h4\"\n        data={ values }\n        horizontalBordered={ horizontalBordered }\n      />\n    </Div>\n  )\n}\n\nexport default PermitDetail\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { themeSpacing, Icon } from \"@amsterdam/asc-ui\"\nimport DefinitionList  from \"../../Data/DefinitionList/DefinitionList\"\nimport { Check, Close } from \"../../Icons/index\"\nimport useValues from \"../hooks/useValues\"\nimport Permit from \"../PermitType\"\nimport { isValidPermit } from \"../utils\"\n\ntype Props = {\n  permit: Permit\n  horizontalBordered: boolean\n}\n\nconst Div = styled.div<{ isOpaque?: boolean }>`\n  margin-bottom: ${ themeSpacing(8) };\n  dl {\n    opacity: ${ ({ isOpaque = true }) => isOpaque ? 1 : 0.3 };\n  }\n`\n\nconst HeadingSpan = styled.span`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n`\n\nconst StyledIcon = styled(Icon)`\n  margin-left: ${ themeSpacing(2) };\n`\n\nconst PermitDetail: React.FC<Props> = ({ permit, horizontalBordered }) => {\n  const values = useValues(permit)\n  const isValid = isValidPermit(permit)\n\n  return (\n    <Div isOpaque={ isValid }>\n      <DefinitionList\n        title={\n          <HeadingSpan>\n            { permit.product }\n            <StyledIcon color={ isValid ? \"#00a03c\" : \"#ec0000\" } >\n              { isValid ? <Check /> : <Close /> }\n            </StyledIcon>\n          </HeadingSpan>\n        }\n        headingSize=\"h4\"\n        data={ values }\n        horizontalBordered={ horizontalBordered }\n      />\n    </Div>\n  )\n}\n\nexport default PermitDetail\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport dayjs from \"dayjs\"\nimport relativeTime from \"dayjs/plugin/relativeTime\"\nimport pickby from \"lodash.pickby\"\nimport DateDisplay from \"../../DateDisplay/DateDisplay\"\n\n// Load the plugin\ndayjs.extend(relativeTime)\n\nconst Bold = styled.span`\n  font-weight: 600;\n`\n\nconst Italic = styled.span`\n  font-style: italic;\n`\n\nconst timeMapper: { [key: string]: string } = {\n  \"hours\": \"uur\",\n  \"a day\": \"één dag\",\n  \"days\": \"dagen\",\n  \"a month\": \"één maand\",\n  \"months\": \"maanden\",\n  \"a year\": \"één jaar\",\n  \"years\": \"jaar\"\n}\n\nconst getTimeFromNow = (date?: string) => {\n  if (!date) {\n    return \"\"\n  }\n  const fromNowString = dayjs(date).fromNow(true)\n  const str = fromNowString.replace(/\\b(?:hours|a day|days|a month|months|a year|years)\\b/gi, (matched) => timeMapper[matched])\n  return str\n}\n\nconst getFamilyNames = (family: any[]) => {\n  const familyNames = family.map((member: any) => member?.naam?.geslachtsnaam === \".\" ? \"onbekend\" : `${ member?.naam?.voornamen ?? \"\" } ${ member?.naam?.geslachtsnaam }`).join(\", \")\n  return familyNames || undefined\n}\n\nconst useValues = (resident: any) => {\n  const {\n    leeftijd,\n    geboorte: {\n      datum: {\n        datum: geboorteDatum,\n        jaar\n      }\n    },\n    verblijfplaats,\n    naam: {\n      voornamen,\n      voorletters,\n      geslachtsnaam,\n      voorvoegsel\n    },\n    geslachtsaanduiding,\n    overlijden,\n    _embedded: {\n      kinderen,\n      ouders,\n      partners\n    }\n  } = resident\n\n  const ingeschrevenAdresSinds = verblijfplaats?.datumAanvangAdreshouding?.datum\n\n  const values: any = {\n    \"Voornamen\": voornamen,\n    \"Initialen\": voorletters,\n    \"Voorvoegsel\": voorvoegsel,\n    \"Achternaam\": geslachtsnaam,\n    \"Geslacht\": geslachtsaanduiding,\n    \"Geboren\": geboorteDatum ? (\n      <>\n        <DateDisplay date={ geboorteDatum } />\n        { overlijden ? null : <Bold> ({ leeftijd } jaar)</Bold> }\n      </>\n    ) : jaar,\n    \"Overleden †\": overlijden?.datum?.datum ? (\n      <>\n        <DateDisplay date={ overlijden?.datum?.datum } />\n        <Bold> ({ getTimeFromNow(overlijden?.datum?.datum) } geleden)</Bold>\n      </>\n      ) : undefined,\n    \"Ingeschreven sinds\": ingeschrevenAdresSinds ? (\n      <>\n        <DateDisplay date={ ingeschrevenAdresSinds } />\n        <Bold> ({ getTimeFromNow(ingeschrevenAdresSinds) })</Bold>\n      </>\n    ) : <Italic>Niet beschikbaar</Italic>,\n    \"Kinderen\": getFamilyNames(kinderen),\n    \"Ouders\": getFamilyNames(ouders),\n    \"Partner\": getFamilyNames(partners)\n  }\n\n  const filteredValues = pickby(values, e => e !== undefined)\n\n  return filteredValues\n}\n\nexport default useValues\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { themeSpacing, Spinner } from \"@amsterdam/asc-ui\"\nimport Resident from \"./Resident\"\nimport { Placeholder, LoadingRows } from \"../Data/components\"\n\ntype Props = {\n  loading?: boolean\n  loadingRows?: number\n  residents?: any\n}\n\nconst Ul = styled.ul`\n  margin-top: ${ themeSpacing(8) };\n  padding: 0;\n  list-style: none;\n  li {\n    margin-bottom: ${ themeSpacing(14) };\n  }\n`\n\nconst Residents: React.FC<Props> = ({ residents, loading, loadingRows }) => {\n  if (loading) {\n    return loadingRows ? <LoadingRows numRows={loadingRows} /> : <Spinner data-testid=\"spinner\"/>\n  }\n  if (!(residents?.length >= 0)) {\n    return <Placeholder>Oeps, er gaat iets mis...</Placeholder>\n  }\n  if (residents?.length === 0) {\n    return <Placeholder>Geen ingeschreven personen gevonden</Placeholder>\n  } else {\n    return (\n      <Ul data-testid=\"residents\">\n        {residents.map((resident: any, index: number) => (\n          <Resident resident={resident} key={index} num={index + 1} />\n        ))}\n      </Ul>\n    )\n  }\n}\n\nexport default Residents\n","import styled from \"styled-components\"\nimport { themeSpacing } from \"@amsterdam/asc-ui\"\n\nconst TableCell = styled.td`\n  padding: ${ themeSpacing(4) } ${ themeSpacing(3) };\n  vertical-align: middle;\n`\n\nexport default TableCell\n","import React from \"react\"\nimport styled, { css } from \"styled-components\"\nimport { breakpoint, themeColor, themeSpacing } from \"@amsterdam/asc-ui\"\n\nimport useNodeDimensions from \"../../../hooks/useNodeDimensions/useNodeDimensions\"\nimport useNodeByReference from \"../../../hooks/useNodeByReference/useNodeByReference\"\n\ntype StyledProps = {\n  isFixed?: boolean\n  minWidth?: number\n  w?: number\n  h?: number\n}\n\nconst StyledTableHeader = styled.th<StyledProps>`\n  text-align: left;\n  border-bottom: 1px solid ${ themeColor(\"tint\", \"level4\") };\n  padding: ${ themeSpacing(2) } ${ themeSpacing(3) };\n  min-width: ${ ({ minWidth }) => minWidth ? `${ minWidth }px` : \"auto\" };\n  width: ${ ({ w }) => w ? `${ w }px` : \"auto\" };\n  white-space: nowrap;\n  height: ${ ({ h }) => h ? `${ h }px;` : \"auto\" };\n\n  ${ ({ isFixed, minWidth }) => isFixed && css`\n      position: absolute;\n      right: 0;\n      width: ${ minWidth ? `${ minWidth }px` : \"auto\" };\n\n      /* hide text on mobile for fixed column */\n      opacity: 0;\n      @media screen and ${ breakpoint(\"min-width\", \"laptopM\") } {\n        opacity: 100;\n      }\n  ` }\n\n`\n\ntype Props = {\n  width?: number\n  isFixed?: boolean\n  minWidth?: number\n}\n\n/**\n * This table-cell is positioned absolutely, to mimic a 'fixed-column' on smaller screens.\n *\n * Its positioned absolutely and therefore doesn't automatically follow the 'document-flow' anymore.\n * We calculate its height based on the height of the parent-node.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/In_Flow_and_Out_of_Flow\n */\n\n const StyledHeader: React.FC<Props> = ({ children, width, minWidth, isFixed }) => {\n  // Grab parent node, a table-row element (TR).\n  const { ref, node } = useNodeByReference<HTMLTableCellElement>(node => node?.parentElement ?? undefined)\n  // Grab dimensions of the table-row.\n  const dimensions = useNodeDimensions(node)\n  // Pass height of the table-row.\n  return (\n    <StyledTableHeader\n      ref={ref}\n      h={dimensions?.height}\n      w={ width }\n      minWidth={ minWidth }\n      isFixed={ isFixed }\n    >\n      { children }\n    </StyledTableHeader>\n  )\n}\n\nexport default StyledHeader\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Icon, themeSpacing, themeColor } from \"@amsterdam/asc-ui\"\nimport { ArrowDownward, ArrowUpward } from \"../../../../Icons\"\nimport { Sorting, ASCEND, DESCEND } from \"../../types\"\n\ntype Props = {\n  header?: React.ReactNode\n  sorting?: Sorting\n  onChangeSorting: (sorting: Sorting) => void\n  index: number\n}\n\ntype LabelProps = {\n  isSelected: boolean\n  sortOrder: string\n}\n\ntype IconProps = {\n  isSelected: boolean\n}\n\nconst StyledLabel = styled.div<LabelProps>`\n  display: flex;\n  cursor: pointer;\n  ${ ({ isSelected }) => !isSelected\n    ? `&:hover {\n      opacity: 0.5;\n    }\n      &:hover span {\n      visibility: visible;\n    }`\n    : \"\"\n  }\n  &:active span {\n    ${ ({ isSelected, sortOrder }) => isSelected && (\n      `animation: ${ sortOrder === \"DESCEND\" ? \"rotate-back\" : \"rotate\" } 0.3s ease 0s;`\n      )\n    }\n  }\n  @-webkit-keyframes rotate {\n    0% { -webkit-transform: rotate(0deg); }\n    100% { -webkit-transform: rotate(180deg); }\n  }\n  @keyframes rotate {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(180deg); }\n  }\n  @-webkit-keyframes rotate-back {\n    0% { -webkit-transform: rotate(0deg); }\n    100% { -webkit-transform: rotate(-180deg); }\n  }\n  @keyframes rotate-back {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(-180deg); }\n  }\n`\n\nconst StyledIcon = styled(Icon)<IconProps>`\n  margin: -${ themeSpacing(0.5) } ${ themeSpacing(1) } 0 ${ themeSpacing(2) };\n  visibility: ${ ({ isSelected }) => isSelected ? \"visible\" : \"hidden\" };\n  color: ${ themeColor(\"tint\", \"level6\") };\n`\n\nconst Sorter: React.FC<Props> = ({ header, index, sorting, onChangeSorting }) => {\n  const isSelected = sorting?.index === index\n  // Only show arrow down icon when order is DESCEND and sorting is already selected.\n  const Asset = isSelected && sorting?.order === DESCEND ? ArrowDownward : ArrowUpward\n\n  const onSorterClick = () => {\n    const newOrder = isSelected && sorting?.order === ASCEND ? DESCEND : ASCEND\n    onChangeSorting({ index: index, order: newOrder })\n  }\n\n  return (\n    <StyledLabel isSelected={ isSelected } sortOrder={ sorting?.order ?? ASCEND } onClick={ onSorterClick }>\n      { header ?? <>&nbsp;</> }\n      <StyledIcon isSelected={ isSelected }><Asset /></StyledIcon>\n    </StyledLabel>\n  )\n}\n\nexport default Sorter\n","\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { breakpoint, themeColor, themeSpacing } from \"@amsterdam/asc-ui\"\n\nimport useNodeDimensions from \"../../../hooks/useNodeDimensions/useNodeDimensions\"\nimport useNodeByReference from \"../../../hooks/useNodeByReference/useNodeByReference\"\n\ntype StyledTDProps = {\n  w?: number\n  h?: number\n}\n\nexport const widthMobile = 48\n\nconst StyledTd = styled.td<StyledTDProps>`\n  padding: ${ themeSpacing(4) } ${ themeSpacing(3) };\n  vertical-align: middle;\n\n  position: absolute;\n  right: 0;\n\n  border-left: 1px solid ${ themeColor(\"tint\", \"level3\") };\n\n  width: ${ widthMobile }px;\n  @media screen and ${ breakpoint(\"min-width\", \"laptopM\") } {\n    width: ${ ({ w }) => `${ w ?? widthMobile }px;` };\n  }\n\n  height: ${ ({ h }) => h ? `${ h }px;` : \"auto\" };\n`\n\ntype Props = {\n  width?: number\n}\n\n/**\n * This table-cell is positioned absolutely, to mimic a 'fixed-column' on smaller screens.\n *\n * Its positioned absolutely and therefore doesn't automatically follow the 'document-flow' anymore.\n * We calculate its height based on the height of the parent-node.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/In_Flow_and_Out_of_Flow\n */\nconst FixedTableCell: React.FC<Props> = ({ children, width }) => {\n  // Grab parent node, a table-row element (TR).\n  const { ref, node } = useNodeByReference<HTMLTableCellElement>(node => node?.parentElement ?? undefined)\n  // Grab dimensions of the table-row.\n  const dimensions = useNodeDimensions(node)\n  // Pass height of the table-row.\n  return <StyledTd ref={ref} h={dimensions?.height} w={width}>\n    { children }\n  </StyledTd>\n}\n\n\nexport default FixedTableCell\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { themeSpacing, Pagination } from \"@amsterdam/asc-ui\"\nimport { PaginationType } from \"../../types\"\n\nconst StyledPagination = styled(Pagination)`\n  margin-top: ${ themeSpacing(4) };\n  display: flex;\n  justify-content: center;\n`\n\nconst TablePagination: React.FC<PaginationType> = ({\n  page = 1, pageSize = 10, collectionSize = 10, onPageChange, paginationLength\n}) => (\n  <StyledPagination\n    page={page}\n    pageSize={pageSize}\n    collectionSize={collectionSize}\n    onPageChange={onPageChange}\n    paginationLength={paginationLength}\n  />\n)\n\nexport default TablePagination\n","import React, { Fragment, useMemo } from \"react\"\nimport { breakpoint, themeColor } from \"@amsterdam/asc-ui\"\nimport styled, { css } from \"styled-components\"\nimport _get from \"lodash.get\"\n\nimport SmallSkeleton from \"../components/SmallSkeleton\"\nimport TableCell from \"./components/TableCell/TableCell\"\nimport TableHeader from \"./components/TableHeader/TableHeader\"\nimport FixedTableCell, { widthMobile as fixedColumnWidthMobile } from \"./components/TableCell/FixedTableCell\"\nimport TablePagination from \"./components/TablePagination/TablePagination\"\nimport devWarning from \"../../../helpers/devWarning\"\nimport usePagination, { DEFAULT_PAGE_SIZE } from \"./hooks/usePagination\"\nimport useSorter from \"./hooks/useSorter\"\nimport { TableType, Sorting, DESCEND } from \"./types\"\n\nconst Wrap = styled.div`\n  position: relative;\n`\n\ntype HorizontalScrollContainerProps = {\n  fixedColumnWidth?: number\n}\n\nconst HorizontalScrollContainer = styled.div<HorizontalScrollContainerProps>`\n  overflow-x: auto;\n  margin-right: ${ fixedColumnWidthMobile }px;\n  @media screen and ${ breakpoint(\"min-width\", \"laptopM\") } {\n    margin-right: ${ ({ fixedColumnWidth }) => fixedColumnWidth ? `${ fixedColumnWidth }px` : \"auto\" };\n  }\n`\n\nconst StyledTable = styled.table`\n  border-spacing: 0px;\n  width: 100%;\n`\n\ntype ClickableRowProps = {\n  isClickable?: boolean\n}\n\nconst Row = styled.tr<ClickableRowProps>`\n  ${ ({ isClickable }) => isClickable && css`\n    cursor: pointer;\n    &:hover td {\n      background-color: ${ themeColor(\"tint\", \"level2\") };\n    }\n  `\n  }\n  td {\n    border-bottom: 1px solid ${ themeColor(\"tint\", \"level3\") };\n  }\n`\n\nconst NoValuesPlaceholder = styled(TableCell)`\n  font-style: italic;\n`\n\nconst createLoadingData = (numColumns: number, numRows: number) =>\n  [...Array(numRows)].map(_ => [...Array(numColumns)].map(_ => \"\"))\n\nconst Table = <R extends object = any>(props: TableType<R>) => {\n  const {\n    columns,\n    loading = false,\n    numLoadingRows = 5,\n    lastColumnFixed,\n    showHeadWhenEmpty = true,\n    emptyPlaceholder = \"\",\n    onClickRow,\n    data = [],\n    pagination,\n    onChange\n  } = props\n\n  const isEmpty = (data?.length ?? 0) === 0\n\n  const fixedColumnWidth = lastColumnFixed\n    ? columns[columns.length - 1].minWidth\n    : undefined\n\n  // ============================ Sorter =============================\n  const onSortingTrigger = (sortingObj: Sorting) => {\n    onChange?.(\n      getPaginationData(),\n      {\n        dataIndex: sortingObj?.index !== undefined ? columns?.[sortingObj?.index].dataIndex : undefined,\n        order: sortingObj?.order\n      }\n    )\n  }\n\n  const [mergedSorting, sorter, onChangeSorting, getSortingObj] = useSorter(\n    columns,\n    onSortingTrigger\n  )\n\n  const sortedDataAscend = useMemo<R[]>(() => {\n    if (sorter !== undefined && typeof sorter === \"function\") {\n      return [...data].sort(sorter)\n    }\n    return data\n  }, [data, sorter])\n\n  const sortedData = useMemo<R[]>(() => {\n    if (sortedDataAscend !== undefined && mergedSorting?.order === DESCEND) {\n      return [...sortedDataAscend].reverse()\n    }\n    return sortedDataAscend\n  },[sortedDataAscend, mergedSorting?.order])\n\n  // ========================== Pagination ==========================\n  const onPaginationTrigger = (page: number) => {\n    onChange?.({ page, pageSize: mergedPagination.pageSize, collectionSize: mergedPagination.collectionSize  }, getSortingObj())\n  }\n\n  // Set warning if pagination prop page is given but not higher than 0.\n  devWarning(\n    pagination !== false && pagination?.page !== undefined  && typeof pagination.page == \"number\" && !(pagination.page > 0),\n    \"Table\",\n    \"`page` of `pagination` must be greater than 0.\"\n  )\n\n  const [mergedPagination] = usePagination(\n    sortedData.length,\n    pagination,\n    onPaginationTrigger\n  )\n\n  const getPaginationData = () => ({\n    page: mergedPagination.page,\n    pageSize: mergedPagination.pageSize,\n    collectionSize: mergedPagination.collectionSize\n  })\n\n  // Get paged data...\n  const pageData = useMemo<R[]>(() => {\n    if (pagination === false || !mergedPagination.pageSize) {\n      return sortedData\n    }\n\n    const { page = 1, collectionSize, pageSize = DEFAULT_PAGE_SIZE } = mergedPagination\n\n    // Dynamic table data\n    if (sortedData.length < collectionSize!) {\n      if (sortedData.length > pageSize) {\n        devWarning(\n          true,\n          \"Table\",\n          \"`data` length is less than `pagination.collectionSize` but larger than `pagination.pageSize`. Please make sure your config is correct.\"\n        )\n        return sortedData.slice((page - 1) * pageSize, page * pageSize)\n      }\n      return sortedData\n    }\n\n    return sortedData.slice((page - 1) * pageSize, page * pageSize)\n  }, [\n    pagination,\n    sortedData,\n    mergedPagination\n  ])\n\n  // ============================ Render ============================\n  return (\n    <Wrap data-testid=\"table\">\n      <HorizontalScrollContainer fixedColumnWidth={ fixedColumnWidth }>\n        <StyledTable>\n          {(showHeadWhenEmpty || !isEmpty) && (\n            <TableHeader\n              columns={ columns }\n              lastColumnFixed={ lastColumnFixed }\n              onChangeSorting={ onChangeSorting }\n              sorting={ mergedSorting }\n            />\n          )}\n          <tbody>\n            {!loading && pageData?.map((rowData, index) => (\n              <Row\n                key={ index }\n                onClick={ (event: React.MouseEvent) => onClickRow?.(rowData, index, event) }\n                isClickable={ onClickRow !== undefined }\n              >\n                {columns.map((column, index) => {\n                  const text = column.dataIndex ? _get(rowData, column.dataIndex) : null\n                  const node = column.render ? column.render(text, rowData) : text\n                  if (lastColumnFixed && index === columns.length - 1) {\n                    return (\n                      <FixedTableCell\n                        key={ index }\n                        width={ fixedColumnWidth }\n                        data-testid=\"table-cell-fixed\"\n                      >\n                        { node }\n                      </FixedTableCell>\n                    )\n                  }\n                  return (\n                    <TableCell key={ index } data-testid=\"table-cell\">\n                      {loading\n                        ? <SmallSkeleton maxRandomWidth={ column.minWidth ?? 30 } />\n                        : node\n                      }\n                    </TableCell>\n                  )\n                })}\n              </Row>\n            ))}\n            {loading && createLoadingData(columns.length, numLoadingRows).map((row, index) => (\n              <Row key={ index }>\n                {row.map((cell, index) =>\n                  <Fragment key={ index }>\n                  { lastColumnFixed && index === row.length - 1\n                    ? (\n                      <FixedTableCell width={ fixedColumnWidth } data-testid=\"table-cell-fixed\">\n                        <SmallSkeleton maxRandomWidth={ columns[index].minWidth ?? 30 } />\n                      </FixedTableCell>\n                    ) : (\n                      <TableCell data-testid=\"table-cell\">\n                        <SmallSkeleton maxRandomWidth={ columns[index].minWidth ?? 30 } />\n                      </TableCell>\n                    )\n                  }\n                  </Fragment>\n                )}\n              </Row>\n            ))}\n            {!loading && isEmpty && (\n              <tr>\n                <NoValuesPlaceholder colSpan={ columns.length }>\n                  { emptyPlaceholder }\n                </NoValuesPlaceholder>\n              </tr>\n            )}\n          </tbody>\n        </StyledTable>\n      </HorizontalScrollContainer>\n      {pagination !== false && !isEmpty && <TablePagination { ...mergedPagination } />}\n    </Wrap>\n  )\n}\n\nexport default Table\n","import React, { ReactNode, useState } from \"react\"\nimport styled from \"styled-components\"\nimport { Button, Icon } from \"@amsterdam/asc-ui\"\nimport { ExpandMore } from \"../../Icons\"\n\nexport type StyleProps = {\n  isOpen?: boolean\n} & React.AnchorHTMLAttributes<HTMLAnchorElement> &\n  React.HTMLAttributes<HTMLDivElement>;\n\nexport const StyledExpandableButton = styled(Button)<StyleProps>`\n  position: relative;\n  width: 100%;\n  height: initial;\n  background-color: transparent;\n  padding: 12px 0;\n  font-size: 18px;\n  &:hover,\n  &:focus {\n    background-color: transparent;\n  }\n  span {\n    span {\n      transform: rotate(${ ({ isOpen }) => (isOpen ? \"180deg\" : \"0deg\") });\n      transition: transform 0.3s ease;\n    }\n  }\n` \n\nexport const StyledExpandableContent = styled.div<StyleProps>`\n  transition: opacity 0.3s ease-in-out, max-height 0.3s ease-in-out;\n  opacity: ${ ({ isOpen }) => (isOpen ? 1 : 0) };\n  max-height: ${ ({ isOpen }) => (isOpen ? \"1000px\" : \"0\") }; \n  overflow: hidden;\n  position: relative;\n`\n\nconst StyledDiv = styled.div`\n  margin-bottom: 12px;\n`\n\ntype Props = {\n  title: string\n  children: ReactNode\n  defaultOpen?: boolean \n}\n\nconst ExpandableContainer: React.FC<Props> = ({ title, children, defaultOpen = false }) => {\n  const [open, setOpen] = useState(defaultOpen)\n\n  const onClick = () => {\n    setOpen(!open)\n  }\n\n  return (\n    <StyledDiv>\n      <StyledExpandableButton \n        aria-expanded={open}\n        isOpen={open}\n        type=\"button\"\n        variant=\"blank\"\n        iconRight={<Icon size={20}><ExpandMore /></Icon>}\n        onClick={onClick}\n      >\n        { title }\n      </StyledExpandableButton>\n      <StyledExpandableContent isOpen={open}>\n        { children }\n      </StyledExpandableContent>\n    </StyledDiv>    \n  )\n}\n\nexport default ExpandableContainer"],"names":[],"sourceRoot":""}